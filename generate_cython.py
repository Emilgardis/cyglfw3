"""Auto-generates bindings for GLFW.

Bindings are automatically created for both the .pxd and .pyx for:
   * #defines
   * structs
   * function pointers

Function bindings, callbacks and logic are not auto-generated and are provided by
a static block of code pre-pended to the .pyx file.

The regular expressions used in this file are dependent on
the GLFW coding style remaining consistent.
Changes to the GLFW coding style may break this code.
"""

import re

header_string = """
#
# This file is autogenerated.
# Changes should be made to 'generate_cython.py'.
# Re-run the script by running 'python generate_cython.py'
#
"""

define_regexp = re.compile(r'#define (?P<define>GLFW_[^\s]+)')
def defines(lines):
    for line in lines:
        match = define_regexp.search(line)
        if match:
            define = match.group('define')
            if 'DEFINED' in define:
                continue
            yield define


struct_regexp = re.compile(r'typedef struct (\w+)\s({(?P<variables>[^}]+)}\s)?(?P<name>\w+);', flags=re.DOTALL)
variable_regexp = re.compile(r'(?P<type>[\w\s\d\*]+)\s(?P<name>[\w\d]+)$', flags=re.DOTALL)
def structs(text):
    def extract_variables(text):
        # split by ;
        variables = text.split(';')

        for variable in variables:
            # strip and remove empty variables
            variable = variable.strip()
            if not len(variable):
                continue

            match = variable_regexp.search(variable)
            type = match.group('type')
            name = match.group('name')
            yield type, name

    for match in struct_regexp.finditer(text):
        name = match.group('name')
        variables = match.group('variables') or ''
        variables = list(extract_variables(variables))
        yield name, variables


void_regexp = re.compile(r'\(void\)')

fp_regexp = re.compile(r'typedef (?P<signature>void \(\*\s?\w+\)\([\w\d\s\*,]+\));')
def function_pointers(lines):
    for line in lines:
        match = fp_regexp.search(line)
        if match:
            signature = match.group('signature')
            signature = void_regexp.sub('()', signature)
            yield signature

function_regexp = re.compile(r'GLFWAPI (?P<return>[\w\s\d\*]+) (?P<name>[\w\d]+)\((?P<parameters>.*)\);')
def functions(lines):
    for line in lines:
        match = function_regexp.search(line)
        if match:
            ret = match.group('return')
            name = match.group('name')
            parameters = match.group('parameters')
            if 'void' == parameters:
                parameters = ''
            yield ret, name, parameters




header = '/usr/local/include/GLFW/glfw3.h'
strip_regexp = re.compile(r'/\*.*?\*/', flags=re.DOTALL)
with open(header, 'r') as f:
    text = f.read()
    text = strip_regexp.sub('', text)
    lines = text.split('\n')


pxd_supplemental = """
#
# Supplemental
#

"""


def generate_pxd():
    pxd_filename = 'cyglfw3/cglfw3.pxd'
    pxd_lines = []

    pxd_lines += header_string.split('\n')

    pxd_lines.append('cdef extern from "GLFW/glfw3.h":')
    pxd_lines.append('\t')

    pxd_lines.append('\t#')
    pxd_lines.append('\t# Defines')
    pxd_lines.append('\t#')
    for define in defines(lines):
        pxd_lines.append('\tcdef int {define}'.format(define=define))
    pxd_lines.append('\t')

    pxd_lines.append('\t#')
    pxd_lines.append('\t# Structs')
    pxd_lines.append('\t#')
    for struct_name, variables in structs(text):
        pxd_lines.append('\tcdef struct {name}:'.format(name=struct_name))
        if len(variables):
            for variable_type, variable_name in variables:
                pxd_lines.append('\t\t{type} {name}'.format(type=variable_type, name=variable_name))
        else:
            pxd_lines.append('\t\tpass')
        pxd_lines.append('\t\t')
    pxd_lines.append('\t')

    pxd_lines.append('\t#')
    pxd_lines.append('\t# Function Pointers')
    pxd_lines.append('\t#')
    for fp in function_pointers(lines):
        pxd_lines.append('\tctypedef {signature}'.format(signature=fp))

    pxd_lines.append('\t')
    pxd_lines.append('\t#')
    pxd_lines.append('\t# Functions')
    pxd_lines.append('\t#')
    for ret, name, params in functions(lines):
        pxd_lines.append('\t{ret} {name}({params})'.format(ret=ret, name=name, params=params))
    pxd_lines.append('\t')

    pxd_lines += pxd_supplemental.split('\n')

    with open(pxd_filename, 'w') as f:
        pxd = '\n'.join(pxd_lines)
        pxd = pxd.replace('\t', '    ')
        f.write(pxd)



# this block is added to the bottom of the pyx file
# it should define the functions and classes
pyx_supplemental = """
#
# Supplemental
#

#
# Callbacks
#

cdef object _error_fun
cdef void errorfun_cb(int a, const char* b):
    global _error_fun
    (<object>_error_fun)(a, b)

cdef dict _windowposfuns = {}
cdef void windowposfun_cb(cglfw3.GLFWwindow* a,int b,int c):
    cb = _windowposfuns[<size_t>a]
    window = Window()
    window._this_ptr = a
    cb(window, b, c)

cdef dict _windowsizefuns = {}
cdef void windowsizefun_cb(cglfw3.GLFWwindow* a,int b,int c):
    cb = _windowsizefuns[<size_t>a]
    window = Window()
    window._this_ptr = a
    cb(window, b, c)

cdef dict _windowclosefuns = {}
cdef void windowclosefun_cb(cglfw3.GLFWwindow* a):
    cb = _windowclosefuns[<size_t>a]
    window = Window()
    window._this_ptr = a
    cb(window)

cdef dict _windowrefreshfuns = {}
cdef void windowrefreshfun_cb(cglfw3.GLFWwindow* a):
    cb = _windowrefreshfuns[<size_t>a]
    window = Window()
    window._this_ptr = a
    cb(window)

cdef dict _windowfocusfuns = {}
cdef void windowfocusfun_cb(cglfw3.GLFWwindow* a,int b):
    cb = _windowfocusfuns[<size_t>a]
    window = Window()
    window._this_ptr = a
    cb(window, b)

cdef dict _windowiconifyfuns = {}
cdef void windowiconifyfun_cb(cglfw3.GLFWwindow* a,int b):
    cb = _windowiconifyfuns[<size_t>a]
    window = Window()
    window._this_ptr = a
    cb(window, b)

cdef dict _framebuffersizefuns = {}
cdef void framebuffersizefun_cb(cglfw3.GLFWwindow* a,int b,int c):
    cb = _framebuffersizefuns[<size_t>a]
    window = Window()
    window._this_ptr = a
    cb(window, b, c)

cdef dict _mousebuttonfuns = {}
cdef void mousebuttonfun_cb(cglfw3.GLFWwindow* a,int b,int c,int d):
    cb = _mousebuttonfuns[<size_t>a]
    window = Window()
    window._this_ptr = a
    cb(window, b, c, d)

cdef dict _cursorposfuns = {}
cdef void cursorposfun_cb(cglfw3.GLFWwindow* a,double b,double c):
    cb = _cursorposfuns[<size_t>a]
    window = Window()
    window._this_ptr = a
    cb(window, b, c)

cdef dict _cursorenterfuns = {}
cdef void cursorenterfun_cb(cglfw3.GLFWwindow* a,int b):
    cb = _cursorenterfuns[<size_t>a]
    window = Window()
    window._this_ptr = a
    cb(window, b)

cdef dict _scrollfuns = {}
cdef void scrollfun_cb(cglfw3.GLFWwindow* a,double b,double c):
    cb = _scrollfuns[<size_t>a]
    window = Window()
    window._this_ptr = a
    cb(window, b, c)

cdef dict _keyfuns = {}
cdef void keyfun_cb(cglfw3.GLFWwindow* a,int b,int c,int d,int e):
    cb = _keyfuns[<size_t>a]
    window = Window()
    window._this_ptr = a
    cb(window, b, c, d, e)

cdef dict _charfuns = {}
cdef void charfun_cb(cglfw3.GLFWwindow* a,unsigned int b):
    cb = _charfuns[<size_t>a]
    window = Window()
    window._this_ptr = a
    cb(window, b)

cdef object _monitorfun
cdef void monitorfun_cb(cglfw3.GLFWmonitor* a,int b):
    global _monitorfun
    monitor = Monitor()
    monitor._this_ptr = a
    _monitorfun(monitor, b)


#
# Classes
#

cdef class Window:
    cdef const cglfw3.GLFWwindow * _this_ptr

    def __cinit__(self):
        self._this_ptr = NULL

    def __richcmp__(Window self, Window other, int op):
        if op == 0:
            # <
            return self._this_ptr < other._this_ptr
        elif op == 1:
            # <=
            return self._this_ptr <= other._this_ptr
        elif op == 2:
            # ==
            return self._this_ptr == other._this_ptr
        elif op == 3:
            # !=
            return self._this_ptr != other._this_ptr
        elif op == 4:
            # >
            return self._this_ptr > other._this_ptr
        elif op == 5:
            # >=
            return self._this_ptr >= other._this_ptr

cdef class Monitor:
    cdef const cglfw3.GLFWmonitor * _this_ptr
    def __cinit__(self):
        self._this_ptr = NULL

    def __richcmp__(Monitor self, Monitor other, int op):
        if op == 0:
            # <
            return self._this_ptr < other._this_ptr
        elif op == 1:
            # <=
            return self._this_ptr <= other._this_ptr
        elif op == 2:
            # ==
            return self._this_ptr == other._this_ptr
        elif op == 3:
            # !=
            return self._this_ptr != other._this_ptr
        elif op == 4:
            # >
            return self._this_ptr > other._this_ptr
        elif op == 5:
            # >=
            return self._this_ptr >= other._this_ptr


cdef class VidMode:
    cdef const cglfw3.GLFWvidmode * _this_ptr
    def __cinit__(self):
        self._this_ptr = NULL

    property width:
        def __get__(self):
            return self._this_ptr.width

    property height:
        def __get__(self):
            return self._this_ptr.height

    property redBits:
        def __get__(self):
            return self._this_ptr.redBits

    property greenBits:
        def __get__(self):
            return self._this_ptr.greenBits

    property blueBits:
        def __get__(self):
            return self._this_ptr.blueBits

    property refreshRate:
        def __get__(self):
            return self._this_ptr.refreshRate

    def __richcmp__(VidMode self, VidMode other, int op):
        us = (self.width, self.height, self.redBits, self.greenBits, self.blueBits, self.refreshRate)
        them = (other.width, other.height, other.redBits, other.greenBits, other.blueBits, other.refreshRate)
        if op == 0:
            # <
            return us < them
        elif op == 1:
            # <=
            return us <= them
        elif op == 2:
            # ==
            return us == them
        elif op == 3:
            # !=
            return us != them
        elif op == 4:
            # >
            return us > them
        elif op == 5:
            # >=
            return us >= them

cdef class GammaRamp:
    cdef const cglfw3.GLFWgammaramp * _this_ptr
    def __cinit__(self):
        self._this_ptr = NULL

    property red:
        def __get__(self):
            red = [] * self._this_ptr.size

            for i in range(self._this_ptr.size):
                red[i] = self._this_ptr.red[i]
            return red

    property green:
        def __get__(self):
            green = [] * self._this_ptr.size

            for i in range(self._this_ptr.size):
                green[i] = self._this_ptr.green[i]
            return green

    property blue:
        def __get__(self):
            blue = [] * self._this_ptr.size

            for i in range(self._this_ptr.size):
                blue[i] = self._this_ptr.blue[i]
            return blue

    def __richcmp__(GammaRamp self, GammaRamp other, int op):
        us = (self.red, self.green, self.blue)
        them = (other.red, other.green, other.blue)
        if op == 0:
            # <
            return us < them
        elif op == 1:
            # <=
            return us <= them
        elif op == 2:
            # ==
            return us == them
        elif op == 3:
            # !=
            return us != them
        elif op == 4:
            # >
            return us > them
        elif op == 5:
            # >=
            return us >= them

#
# Functions
#
def init():
    return cglfw3.glfwInit()

def terminate():
    cglfw3.glfwTerminate()

def getVersion():
    cdef int major, minor, rev
    cglfw3.glfwGetVersion(&major, &minor, &rev)
    return major, minor, rev

def getVersionString():
    return cglfw3.glfwGetVersionString()

def setErrorCallback(cbfun):
    global _error_fun
    _error_fun = cbfun
    cglfw3.glfwSetErrorCallback(errorfun_cb)

def getMonitors():
    cdef int count
    cdef cglfw3.GLFWmonitor ** c_monitors = NULL
    c_monitors = cglfw3.glfwGetMonitors(&count)

    monitors = []
    for i in range(count):
        monitor = Monitor()
        monitor._this_ptr = c_monitors[i]
        monitors.append(monitor)
    return monitors

def getPrimaryMonitor():
    cdef const cglfw3.GLFWmonitor* c_monitor = cglfw3.glfwGetPrimaryMonitor()
    monitor = Monitor()
    monitor._this_ptr = c_monitor
    return monitor

def getMonitorPos(Monitor monitor):
    cdef int x, y
    cglfw3.glfwGetMonitorPos(<cglfw3.GLFWmonitor*>monitor._this_ptr, &x, &y)
    return x, y

def getMonitorPhysicalSize(Monitor monitor):
    cdef int width, height
    cglfw3.glfwGetMonitorPhysicalSize(<cglfw3.GLFWmonitor*>monitor._this_ptr, &width, &height)
    return width, height

def getMonitorName(Monitor monitor):
    return cglfw3.glfwGetMonitorName(<cglfw3.GLFWmonitor*>monitor._this_ptr)

def setMonitorCallback(cbfun):
    global _monitorfun
    _monitorfun = cbfun
    cglfw3.glfwSetMonitorCallback(monitorfun_cb)

def getVideoModes(Monitor monitor):
    cdef int count
    cdef const cglfw3.GLFWvidmode* c_vidmodes = cglfw3.glfwGetVideoModes(<cglfw3.GLFWmonitor*>monitor._this_ptr, &count)

    vidmodes = []
    for i in range(count):
        vidmode = VidMode()
        vidmode._this_ptr = &c_vidmodes[i]
        vidmodes.append(vidmode)
    return vidmodes

def getVideoMode(Monitor monitor):
    cdef const cglfw3.GLFWvidmode* c_vidmode = cglfw3.glfwGetVideoMode(<cglfw3.GLFWmonitor*>monitor._this_ptr)
    vidmode = VidMode()
    vidmode._this_ptr = c_vidmode
    return vidmode

def setGamma(Monitor monitor, float gamma):
    cglfw3.glfwSetGamma(<cglfw3.GLFWmonitor*>monitor._this_ptr, gamma)

def getGammaRamp(Monitor monitor):
    cdef const cglfw3.GLFWgammaramp* c_gammaramp = cglfw3.glfwGetGammaRamp(<cglfw3.GLFWmonitor*>monitor._this_ptr)
    gammaramp = GammaRamp()
    gammaramp._this_ptr = c_gammaramp
    return gammaramp

def defaultWindowHints():
    cglfw3.glfwDefaultWindowHints()

def windowHint(int target, int hint):
    cglfw3.glfwWindowHint(target, hint)

def createWindow(int width, int height, char* title):
    cdef const cglfw3.GLFWwindow* c_window = cglfw3.glfwCreateWindow(width, height, title, NULL, NULL)
    window = Window()
    window._this_ptr = c_window
    return window

def destroyWindow(Window window):
    cglfw3.glfwDestroyWindow(<cglfw3.GLFWwindow*>window._this_ptr)

def windowShouldClose(Window window):
    return cglfw3.glfwWindowShouldClose(<cglfw3.GLFWwindow*>window._this_ptr)

def setWindowShouldClose(Window window, int value):
    cglfw3.glfwSetWindowShouldClose(<cglfw3.GLFWwindow*>window._this_ptr, value)

def setWindowTitle(Window window, const char* title):
    cglfw3.glfwSetWindowTitle(<cglfw3.GLFWwindow*>window._this_ptr, title)

def getWindowPos(Window window):
    cdef int x, y
    cglfw3.glfwGetWindowPos(<cglfw3.GLFWwindow*>window._this_ptr, &x, &y)
    return x, y

def setWindowPos(Window window, int xpos, int ypos):
    cglfw3.glfwSetWindowPos(<cglfw3.GLFWwindow*>window._this_ptr, xpos, ypos)

def getWindowSize(Window window):
    cdef int width, height
    cglfw3.glfwGetWindowSize(<cglfw3.GLFWwindow*>window._this_ptr, &width, &height)

def setWindowSize(Window window, int width, int height):
    cglfw3.glfwSetWindowSize(<cglfw3.GLFWwindow*>window._this_ptr, width, height)

def getFramebufferSize(Window window):
    cdef int width, height
    cglfw3.glfwGetFramebufferSize(<cglfw3.GLFWwindow*>window._this_ptr, &width, &height)
    return width, height

def iconifyWindow(Window window):
    cglfw3.glfwIconifyWindow(<cglfw3.GLFWwindow*>window._this_ptr)

def restoreWindow(Window window):
    cglfw3.glfwRestoreWindow(<cglfw3.GLFWwindow*>window._this_ptr)

def showWindow(Window window):
    cglfw3.glfwShowWindow(<cglfw3.GLFWwindow*>window._this_ptr)

def getWindowAttrib(Window window, int attrib):
    cglfw3.glfwGetWindowAttrib(<cglfw3.GLFWwindow*>window._this_ptr, attrib)

#def setWindowUserPointer(Window window, void* pointer):
#    pass
#
#def getWindowUserPointer(Window window):
#    pass

def setWindowPosCallback(Window window, cbfun):
    global _windowposfuns
    _windowposfuns[<size_t>window._this_ptr] = cbfun
    cglfw3.glfwSetWindowPosCallback(<cglfw3.GLFWwindow*>window._this_ptr, windowposfun_cb)

def setWindowSizeCallback(Window window, cbfun):
    global _windowsizefuns
    _windowsizefuns[<size_t>window._this_ptr] = cbfun
    cglfw3.glfwSetWindowSizeCallback(<cglfw3.GLFWwindow*>window._this_ptr, windowsizefun_cb)

def setWindowCloseCallback(Window window, cbfun):
    global _windowclosefuns
    _windowclosefuns[<size_t>window._this_ptr] = cbfun
    cglfw3.glfwSetWindowCloseCallback(<cglfw3.GLFWwindow*>window._this_ptr, windowclosefun_cb)

def setWindowRefreshCallback(Window window, cbfun):
    global _windowrefreshfuns
    _windowrefreshfuns[<size_t>window._this_ptr] = cbfun
    cglfw3.glfwSetWindowRefreshCallback(<cglfw3.GLFWwindow*>window._this_ptr, windowrefreshfun_cb)

def setWindowFocusCallback(Window window, cbfun):
    global _windowfocusfuns
    _windowfocusfuns[<size_t>window._this_ptr] = cbfun
    cglfw3.glfwSetWindowFocusCallback(<cglfw3.GLFWwindow*>window._this_ptr, windowfocusfun_cb)

def setWindowIconifyCallback(Window window, cbfun):
    global _windowiconifyfuns
    _windowiconifyfuns[<size_t>window._this_ptr] = cbfun
    cglfw3.glfwSetWindowIconifyCallback(<cglfw3.GLFWwindow*>window._this_ptr, windowiconifyfun_cb)

def setFramebuferSizeCallback(Window window, cbfun):
    global _framebuffersize
    _framebuffersizefuns[<size_t>window._this_ptr] = cbfun
    cglfw3.glfwSetFramebufferSizeCallback(<cglfw3.GLFWwindow*>window._this_ptr, framebuffersizefun_cb)

def pollEvents():
    cglfw3.glfwPollEvents()

def waitEvents():
    cglfw3.glfwWaitEvents()

def getInputMode(Window window, int mode):
    return cglfw3.glfwGetInputMode(<cglfw3.GLFWwindow*>window._this_ptr, mode)

def setInputMode(Window window, int mode, int value):
    cglfw3.glfwSetInputMode(<cglfw3.GLFWwindow*>window._this_ptr, mode, value)

def getKey(Window window, int key):
    return cglfw3.glfwGetKey(<cglfw3.GLFWwindow*>window._this_ptr, key)

def getMouseButon(Window window, int button):
    return cglfw3.glfwGetMouseButton(<cglfw3.GLFWwindow*>window._this_ptr, button)

def getCursorPos(Window window):
    cdef double x, y
    cglfw3.glfwGetCursorPos(<cglfw3.GLFWwindow*>window._this_ptr, &x, &y)
    return x, y

def setCursorPos(Window window, double xpos, double ypos):
    cglfw3.glfwSetCursorPos(<cglfw3.GLFWwindow*>window._this_ptr, xpos, ypos)

def setKeyCallback(Window window, cbfun):
    global _keyfuns
    _keyfuns[<size_t>window._this_ptr] = cbfun
    cglfw3.glfwSetKeyCallback(<cglfw3.GLFWwindow*>window._this_ptr, keyfun_cb)

def setCharCallback(Window window, cbfun):
    global _charfuns
    _charfuns[<size_t>window._this_ptr] = cbfun
    cglfw3.glfwSetCharCallback(<cglfw3.GLFWwindow*>window._this_ptr, charfun_cb)

def setMouseButtonCallback(Window window, cbfun):
    global _mousebuttonfuns
    _mousebuttonfuns[<size_t>window._this_ptr] = cbfun
    cglfw3.glfwSetMouseButtonCallback(<cglfw3.GLFWwindow*>window._this_ptr, mousebuttonfun_cb)

def setCursorEnterCallback(Window window, cbfun):
    global _cursorenterfuns
    _cursorenterfuns[<size_t>window._this_ptr] = cbfun
    cglfw3.glfwSetCursorEnterCallback(<cglfw3.GLFWwindow*>window._this_ptr, cursorenterfun_cb)

def setScrollCallback(Window window, cbfun):
    global _scrollfuns
    _scrollfuns[<size_t>window._this_ptr] = cbfun
    cglfw3.glfwSetScrollCallback(<cglfw3.GLFWwindow*>window._this_ptr, scrollfun_cb)

def joystickPresent(int joy):
    return cglfw3.glfwJoystickPresent(joy)

def getJoystickAxes(int joy):
    cdef int count
    cdef const float* c_axes = cglfw3.glfwGetJoystickAxes(joy, &count)
    axes = [
        float(c_axes[i])
        for i in range(count)
    ]
    return axes

def getJoystickButtons(int joy):
    cdef int count
    cdef const unsigned char* c_buttons = cglfw3.glfwGetJoystickButtons(joy, &count)
    return str(c_buttons)

def getJoystickName(int joy):
    return str(cglfw3.glfwGetJoystickName(joy))

def setClipboardString(Window window, const char* string):
    cglfw3.glfwSetClipboardString(<cglfw3.GLFWwindow*>window._this_ptr, string)

def getClipboardString(Window window):
    return str(cglfw3.glfwGetClipboardString(<cglfw3.GLFWwindow*>window._this_ptr))

def getTime():
    return cglfw3.glfwGetTime()

def setTime(double time):
    cglfw3.glfwSetTime(time)

def makeContextCurrent(Window window):
    cglfw3.glfwMakeContextCurrent(<cglfw3.GLFWwindow*>window._this_ptr)

def getCurrentContext():
    cdef const cglfw3.GLFWwindow * c_window = cglfw3.glfwGetCurrentContext()
    if not c_window:
        return None

    window = Window()
    window._this_ptr = c_window
    return window

def swapBuffers(Window window):
    cglfw3.glfwSwapBuffers(<cglfw3.GLFWwindow*>window._this_ptr)

def swapInterval(int interval):
    cglfw3.glfwSwapInterval(interval)

def extensionSupported(const char* extension):
    return cglfw3.glfwExtensionSupported(extension)

def getProcAddress(const char* procname):
    return <size_t>cglfw3.glfwGetProcAddress(procname)

"""


strip_define_regexp = re.compile(r'GLFW_')
strip_function_regexp = re.compile(r'glfw')

def generate_pyx():
    pyx_filename = 'cyglfw3/glfw3.pyx'
    pyx_lines = []

    pyx_lines += header_string.split('\n')

    pyx_lines.append('cimport cyglfw3.cglfw3 as cglfw3')
    pyx_lines.append('')

    pyx_lines.append('#')
    pyx_lines.append('# Defines')
    pyx_lines.append('#')
    for define in defines(lines):
        variable = strip_define_regexp.sub('', define)
        pyx_lines.append('{variable} = cglfw3.{define}'.format(variable=variable, define=define))
    pyx_lines.append('\t')

    pyx_lines += pyx_supplemental.split('\n')

    with open(pyx_filename, 'w') as f:
        pyx = '\n'.join(pyx_lines)
        pyx = pyx.replace('\t', '    ')
        f.write(pyx)


generate_pxd()
generate_pyx()
