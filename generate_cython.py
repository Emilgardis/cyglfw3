import re

header_string = """
#
# This file is autogenerated.
# Changes should be made to 'generate_cython.py'.
# Re-run the script by running 'python generate_cython.py'
#
"""

define_regexp = re.compile(r'#define (?P<define>GLFW_[^\s]+)')
def defines(lines):
    for line in lines:
        match = define_regexp.search(line)
        if match:
            define = match.group('define')
            if 'DEFINED' in define:
                continue
            yield define


struct_regexp = re.compile(r'typedef struct (\w+)\s({(?P<variables>[^}]+)}\s)?(?P<name>\w+);', flags=re.DOTALL)
variable_regexp = re.compile(r'(?P<type>[\w\s\d\*]+)\s(?P<name>[\w\d]+)$', flags=re.DOTALL)
def structs(text):
    def extract_variables(text):
        # split by ;
        variables = text.split(';')

        for variable in variables:
            # strip and remove empty variables
            variable = variable.strip()
            if not len(variable):
                continue

            match = variable_regexp.search(variable)
            type = match.group('type')
            name = match.group('name')
            yield type, name

    for match in struct_regexp.finditer(text):
        name = match.group('name')
        variables = match.group('variables') or ''
        variables = list(extract_variables(variables))
        yield name, variables


void_regexp = re.compile(r'\(void\)')

fp_regexp = re.compile(r'typedef (?P<signature>void \(\*\s?\w+\)\([\w\d\s\*,]+\));')
def function_pointers(lines):
    for line in lines:
        match = fp_regexp.search(line)
        if match:
            signature = match.group('signature')
            signature = void_regexp.sub('()', signature)
            yield signature

function_regexp = re.compile(r'GLFWAPI (?P<return>[\w\s\d\*]+) (?P<name>[\w\d]+)\((?P<parameters>.*)\);')
def functions(lines):
    for line in lines:
        match = function_regexp.search(line)
        if match:
            ret = match.group('return')
            name = match.group('name')
            parameters = match.group('parameters')
            if 'void' == parameters:
                parameters = ''
            yield ret, name, parameters




header = '/usr/local/include/GLFW/glfw3.h'
strip_regexp = re.compile(r'/\*.*?\*/', flags=re.DOTALL)
with open(header, 'r') as f:
    text = f.read()
    text = strip_regexp.sub('', text)
    lines = text.split('\n')


def generate_pxd():
    pxd_filename = 'cyglfw3/cglfw3.pxd'
    pxd_lines = []

    pxd_lines += header_string.split('\n')

    pxd_lines.append('cdef extern from "GLFW/glfw3.h":')
    pxd_lines.append('\t')

    pxd_lines.append('\t#')
    pxd_lines.append('\t# Defines')
    pxd_lines.append('\t#')
    for define in defines(lines):
        pxd_lines.append('\tcdef int {define}'.format(define=define))
    pxd_lines.append('\t')

    pxd_lines.append('\t#')
    pxd_lines.append('\t# Structs')
    pxd_lines.append('\t#')
    for struct_name, variables in structs(text):
        pxd_lines.append('\tcdef struct {name}:'.format(name=struct_name))
        if len(variables):
            for variable_type, variable_name in variables:
                pxd_lines.append('\t\t{type} {name}'.format(type=variable_type, name=variable_name))
        else:
            pxd_lines.append('\t\tpass')
        pxd_lines.append('\t\t')
    pxd_lines.append('\t')

    pxd_lines.append('\t#')
    pxd_lines.append('\t# Function Pointers')
    pxd_lines.append('\t#')
    for fp in function_pointers(lines):
        pxd_lines.append('\tctypedef {signature}'.format(signature=fp))

    pxd_lines.append('\t')
    pxd_lines.append('\t#')
    pxd_lines.append('\t# Functions')
    pxd_lines.append('\t#')
    for ret, name, params in functions(lines):
        pxd_lines.append('\t{ret} {name}({params})'.format(ret=ret, name=name, params=params))
    pxd_lines.append('\t')

    with open(pxd_filename, 'w') as f:
        f.write('\n'.join(pxd_lines))



# this block is added to the bottom of the pyx file
# it should define the functions and classes
pyx_supplemental = """
#
# Supplemental
#

cdef class Window:
    cdef cglfw3.GLFWwindow* _c_window
    def __cinit__(self):
        self._c_window = NULL

    # TODO: add an equality operator

cdef class Monitor:
    cdef cglfw3.GLFWmonitor* _c_monitor
    def __cinit__(self):
        self._c_monitor = NULL

cdef class VidMode:
    cdef cglfw3.GLFWvidmode* _c_vidmode
    def __cinit__(self):
        self._c_vidmode = NULL

    cdef int width(self):
        return self._c_vidmode.width

    cdef int height(self):
        return self._c_vidmode.width

    cdef int redBits(self):
        return self._c_vidmode.redBits

    cdef int greenBits(self):
        return self._c_vidmode.greenBits

    cdef int blueBits(self):
        return self._c_vidmode.blueBits

    cdef int refreshRate(self):
        return self._c_vidmode.refreshRate

cdef class GammaRamp:
    cdef cglfw3.GLFWgammaramp* _c_gammaramp
    def __cinit__(self):
        self._c_gammaramp = NULL

    def red(self):
        red = [] * self._c_gammaramp.size

        for i in range(self._c_gammaramp.size):
            red[i] = self._c_gammaramp.red[i]
        return red

    def green(self):
        green = [] * self._c_gammaramp.size

        for i in range(self._c_gammaramp.size):
            green[i] = self._c_gammaramp.green[i]
        return green

    def blue(self):
        blue = [] * self._c_gammaramp.size

        for i in range(self._c_gammaramp.size):
            blue[i] = self._c_gammaramp.blue[i]
        return blue

#
# Functions
#
def init():
    return cglfw3.glfwInit()

def terminate():
    cglfw3.glfwTerminate()

def getVersion():
    cdef int major, minor, rev
    cglfw3.glfwGetVersion(&major, &minor, &rev)
    return major, minor, rev

def getVersionString():
    return cglfw3.glfwGetVersionString()

def setErrorCallback():
    # TODO:
    pass

def getMonitors():
    cdef int count
    cdef const cglfw3.GLFWmonitor** c_monitors = cglfw3.glfwGetMonitors(&count)

    monitors = []
    for i in range(count):
        monitor = Monitor()
        monitor._c_monitor = c_monitors[i]
        monitors.append(monitor)
    return monitors

def getPrimaryMonitor():
    cdef const cglfw3.GLFWmonitor* c_monitor = cglfw3.glfwGetPrimaryMonitor()
    monitor = Monitor()
    monitor._c_monitor = c_monitor
    return monitor

def getMonitorPos(Monitor monitor):
    cdef int x, y
    cglfw3.glfwGetMonitorPos(monitor._c_monitor, &x, &y)
    return x, y

def getMonitorPhysicalSize(Monitor monitor):
    cdef int width, height
    cglfw3.glfwGetMonitorPhysicalSize(monitor._c_monitor, &width, &height)
    return width, height

def getMonitorName(Monitor monitor):
    return cglfw3.glfwGetMonitorName(monitor._c_monitor)

def setMonitorCallback():
    # TODO:
    pass

def getVideoModes(Monitor monitor):
    #cdef int count
    #cdef cglfw3.GLFWvidmode* c_vidmodes = cglfw3.glfwGetVideoModes(monitor._c_monitor, &count)

    #vidmodes = []
    #for i in range(count):
    #    vidmode = VidMode()
    #    vidmode._c_vidmode = c_vidmodes[i]
    #    vidmodes.append(vidmode)
    #return vidmodes
    # TODO:
    pass

def setGamma(Monitor monitor, float gamma):
    cglfw3.glfwSetGamma(monitor._c_monitor, gamma)

def getGammaRamp(Monitor monitor):
    cdef const cglfw3.GLFWgammaramp* c_gammaramp = cglfw3.glfwGetGammaRamp(monitor._c_monitor)
    gammaramp = GammaRamp()
    gammaramp._c_gammaramp = c_gammaramp
    return gammaramp

def defaultWindowHints():
    cglfw3.glfwDefaultWindowHints()

def windowHint(int target, int hint):
    cglfw3.glfwWindowHint(target, hint)

def createWindow(int width, int height, char* title):
    window = Window()
    window._c_window = cglfw3.glfwCreateWindow(width, height, title, NULL, NULL)
    return window

def destroyWindow(Window window):
    cglfw3.glfwDestroyWindow(window._c_window)

def windowShouldClose(Window window):
    return cglfw3.glfwWindowShouldClose(window._c_window)

def setWindowShouldClose(Window window, int value):
    cglfw3.glfwSetWindowShouldClose(window._c_window, value)

def setWindowTitle(Window window, const char* title):
    cglfw3.glfwSetWindowTitle(window._c_window, title)

def getWindowPos(Window window):
    cdef int x, y
    cglfw3.glfwGetWindowPos(window._c_window, &x, &y)
    return x, y

def setWindowPos(Window window, int xpos, int ypos):
    cglfw3.glfwSetWindowPos(window._c_window, xpos, ypos)

def getWindowSize(Window window):
    cdef int width, height
    cglfw3.glfwGetWindowSize(window._c_window, &width, &height)

def setWindowSize(Window window, int width, int height):
    cglfw3.glfwSetWindowSize(window._c_window, width, height)

def getFramebufferSize(Window window):
    cdef int width, height
    cglfw3.glfwGetFramebufferSize(window._c_window, &width, &height)
    return width, height

def iconifyWindow(Window window):
    cglfw3.glfwIconifyWindow(window._c_window)

def restoreWindow(Window window):
    cglfw3.glfwRestoreWindow(window._c_window)

def showWindow(Window window):
    cglfw3.glfwShowWindow(window._c_window)

def getWindowAttrib(Window window, int attrib):
    cglfw3.glfwGetWindowAttrib(window._c_window, attrib)

#def setWindowUserPointer(Window window, void* pointer):
#    pass
#
#def getWindowUserPointer(Window window):
#    pass

def setWindowPosCallback():
    # TODO:
    pass

def setWindowSizeCallback():
    # TODO:
    pass

def setWindowCloseCallback():
    # TODO:
    pass

def setWindowRefreshCallback():
    # TODO:
    pass

def setWindowFocusCallback():
    # TODO:
    pass

def setWindowIconifyCallback():
    # TODO:
    pass

def setFramebuferSizeCallback():
    # TODO:
    pass

def pollEvents():
    cglfw3.glfwPollEvents()

def waitEvents():
    cglfw3.glfwWaitEvents()

def getInputMode(Window window, int mode):
    return cglfw3.glfwGetInputMode(window._c_window, mode)

def setInputMode(Window window, int mode, int value):
    cglfw3.glfwSetInputMode(window._c_window, mode, value)

def getKey(Window window, int key):
    return cglfw3.glfwGetKey(window._c_window, key)

def getMouseButon(Window window, int button):
    return cglfw3.glfwGetMouseButton(window._c_window, button)

def getCursorPos(Window window):
    cdef double x, y
    cglfw3.glfwGetCursorPos(window._c_window, &x, &y)
    return x, y

def setCursorPos(Window window, double xpos, double ypos):
    cglfw3.glfwSetCursorPos(window._c_window, xpos, ypos)

def setKeyCallback():
    # TODO:
    pass

def setCharCallback():
    # TODO:
    pass

def setMouseButtonCallback():
    # TODO:
    pass

def setCursorEnterCallback():
    # TODO:
    pass

def setScrollCallback():
    # TODO:
    pass

def joystickPresent(int joy):
    return cglfw3.glfwJoystickPresent(joy)

def getJoystickAxes(int joy):
    cdef int count
    cdef const float* c_axes = cglfw3.glfwGetJoystickAxes(joy, &count)
    axes = [
        float(c_axes[i])
        for i in range(count)
    ]
    return axes

def getJoystickButtons(int joy):
    cdef int count
    cdef const unsigned char* c_buttons = cglfw3.glfwGetJoystickButtons(joy, &count)
    return str(c_buttons)

def getJoystickName(int joy):
    return str(cglfw3.glfwGetJoystickName(joy))

def setClipboardString(Window window, const char* string):
    cglfw3.glfwSetClipboardString(window._c_window, string)

def getClipboardString(Window window):
    return str(cglfw3.glfwGetClipboardString(window._c_window))

def getTime():
    return cglfw3.glfwGetTime()

def setTime(double time):
    cglfw3.glfwSetTime(time)

def makeContextCurrent(Window window):
    cglfw3.glfwMakeContextCurrent(window._c_window)

def getCurrentContext():
    cdef const cglfw3.GLFWwindow* c_window = cglfw3.glfwGetCurrentContext()
    window = Window()
    window._c_window = c_window
    return window

def swapBuffers(Window window):
    cglfw3.glfwSwapBuffers(window._c_window)

def swapInterval(int interval):
    cglfw3.glfwSwapInterval(interval)

def extensionSupported(const char* extension):
    return cglfw3.glfwExtensionSupported(extension)

def getProcAddress(const char* procname):
    # TODO:
    pass

"""


strip_define_regexp = re.compile(r'GLFW_')
strip_function_regexp = re.compile(r'glfw')

def generate_pyx():
    pyx_filename = 'cyglfw3/glfw3.pyx'
    pyx_lines = []

    pyx_lines += header_string.split('\n')

    pyx_lines.append('cimport cyglfw3.cglfw3 as cglfw3')
    pyx_lines.append('')

    pyx_lines.append('#')
    pyx_lines.append('# Defines')
    pyx_lines.append('#')
    for define in defines(lines):
        variable = strip_define_regexp.sub('', define)
        pyx_lines.append('{variable} = cglfw3.{define}'.format(variable=variable, define=define))
    pyx_lines.append('\t')

    """
    pyx_lines.append('#')
    pyx_lines.append('# Functions')
    pyx_lines.append('#')
    for ret, name, params in functions(lines):
        stripped_name = strip_function_regexp.sub('', name)
        pyx_lines.append('def {name}():'.format(name=stripped_name, param=params))
        pyx_lines.append('\tcglfw3.{name}()'.format(name=name, params=params))
        pyx_lines.append('')
    """
    pyx_lines += pyx_supplemental.split('\n')

    with open(pyx_filename, 'w') as f:
        f.write('\n'.join(pyx_lines))


generate_pxd()
generate_pyx()
