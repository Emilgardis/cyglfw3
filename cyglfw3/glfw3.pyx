
#
# This file is autogenerated.
# Changes should be made to 'generate_cython.py'.
# Re-run the script by running 'python generate_cython.py'
#

cimport cyglfw3.cglfw3 as cglfw3

#
# Defines
#
VERSION_MAJOR = cglfw3.GLFW_VERSION_MAJOR
VERSION_MINOR = cglfw3.GLFW_VERSION_MINOR
VERSION_REVISION = cglfw3.GLFW_VERSION_REVISION
RELEASE = cglfw3.GLFW_RELEASE
PRESS = cglfw3.GLFW_PRESS
REPEAT = cglfw3.GLFW_REPEAT
KEY_UNKNOWN = cglfw3.GLFW_KEY_UNKNOWN
KEY_SPACE = cglfw3.GLFW_KEY_SPACE
KEY_APOSTROPHE = cglfw3.GLFW_KEY_APOSTROPHE
KEY_COMMA = cglfw3.GLFW_KEY_COMMA
KEY_MINUS = cglfw3.GLFW_KEY_MINUS
KEY_PERIOD = cglfw3.GLFW_KEY_PERIOD
KEY_SLASH = cglfw3.GLFW_KEY_SLASH
KEY_0 = cglfw3.GLFW_KEY_0
KEY_1 = cglfw3.GLFW_KEY_1
KEY_2 = cglfw3.GLFW_KEY_2
KEY_3 = cglfw3.GLFW_KEY_3
KEY_4 = cglfw3.GLFW_KEY_4
KEY_5 = cglfw3.GLFW_KEY_5
KEY_6 = cglfw3.GLFW_KEY_6
KEY_7 = cglfw3.GLFW_KEY_7
KEY_8 = cglfw3.GLFW_KEY_8
KEY_9 = cglfw3.GLFW_KEY_9
KEY_SEMICOLON = cglfw3.GLFW_KEY_SEMICOLON
KEY_EQUAL = cglfw3.GLFW_KEY_EQUAL
KEY_A = cglfw3.GLFW_KEY_A
KEY_B = cglfw3.GLFW_KEY_B
KEY_C = cglfw3.GLFW_KEY_C
KEY_D = cglfw3.GLFW_KEY_D
KEY_E = cglfw3.GLFW_KEY_E
KEY_F = cglfw3.GLFW_KEY_F
KEY_G = cglfw3.GLFW_KEY_G
KEY_H = cglfw3.GLFW_KEY_H
KEY_I = cglfw3.GLFW_KEY_I
KEY_J = cglfw3.GLFW_KEY_J
KEY_K = cglfw3.GLFW_KEY_K
KEY_L = cglfw3.GLFW_KEY_L
KEY_M = cglfw3.GLFW_KEY_M
KEY_N = cglfw3.GLFW_KEY_N
KEY_O = cglfw3.GLFW_KEY_O
KEY_P = cglfw3.GLFW_KEY_P
KEY_Q = cglfw3.GLFW_KEY_Q
KEY_R = cglfw3.GLFW_KEY_R
KEY_S = cglfw3.GLFW_KEY_S
KEY_T = cglfw3.GLFW_KEY_T
KEY_U = cglfw3.GLFW_KEY_U
KEY_V = cglfw3.GLFW_KEY_V
KEY_W = cglfw3.GLFW_KEY_W
KEY_X = cglfw3.GLFW_KEY_X
KEY_Y = cglfw3.GLFW_KEY_Y
KEY_Z = cglfw3.GLFW_KEY_Z
KEY_LEFT_BRACKET = cglfw3.GLFW_KEY_LEFT_BRACKET
KEY_BACKSLASH = cglfw3.GLFW_KEY_BACKSLASH
KEY_RIGHT_BRACKET = cglfw3.GLFW_KEY_RIGHT_BRACKET
KEY_GRAVE_ACCENT = cglfw3.GLFW_KEY_GRAVE_ACCENT
KEY_WORLD_1 = cglfw3.GLFW_KEY_WORLD_1
KEY_WORLD_2 = cglfw3.GLFW_KEY_WORLD_2
KEY_ESCAPE = cglfw3.GLFW_KEY_ESCAPE
KEY_ENTER = cglfw3.GLFW_KEY_ENTER
KEY_TAB = cglfw3.GLFW_KEY_TAB
KEY_BACKSPACE = cglfw3.GLFW_KEY_BACKSPACE
KEY_INSERT = cglfw3.GLFW_KEY_INSERT
KEY_DELETE = cglfw3.GLFW_KEY_DELETE
KEY_RIGHT = cglfw3.GLFW_KEY_RIGHT
KEY_LEFT = cglfw3.GLFW_KEY_LEFT
KEY_DOWN = cglfw3.GLFW_KEY_DOWN
KEY_UP = cglfw3.GLFW_KEY_UP
KEY_PAGE_UP = cglfw3.GLFW_KEY_PAGE_UP
KEY_PAGE_DOWN = cglfw3.GLFW_KEY_PAGE_DOWN
KEY_HOME = cglfw3.GLFW_KEY_HOME
KEY_END = cglfw3.GLFW_KEY_END
KEY_CAPS_LOCK = cglfw3.GLFW_KEY_CAPS_LOCK
KEY_SCROLL_LOCK = cglfw3.GLFW_KEY_SCROLL_LOCK
KEY_NUM_LOCK = cglfw3.GLFW_KEY_NUM_LOCK
KEY_PRINT_SCREEN = cglfw3.GLFW_KEY_PRINT_SCREEN
KEY_PAUSE = cglfw3.GLFW_KEY_PAUSE
KEY_F1 = cglfw3.GLFW_KEY_F1
KEY_F2 = cglfw3.GLFW_KEY_F2
KEY_F3 = cglfw3.GLFW_KEY_F3
KEY_F4 = cglfw3.GLFW_KEY_F4
KEY_F5 = cglfw3.GLFW_KEY_F5
KEY_F6 = cglfw3.GLFW_KEY_F6
KEY_F7 = cglfw3.GLFW_KEY_F7
KEY_F8 = cglfw3.GLFW_KEY_F8
KEY_F9 = cglfw3.GLFW_KEY_F9
KEY_F10 = cglfw3.GLFW_KEY_F10
KEY_F11 = cglfw3.GLFW_KEY_F11
KEY_F12 = cglfw3.GLFW_KEY_F12
KEY_F13 = cglfw3.GLFW_KEY_F13
KEY_F14 = cglfw3.GLFW_KEY_F14
KEY_F15 = cglfw3.GLFW_KEY_F15
KEY_F16 = cglfw3.GLFW_KEY_F16
KEY_F17 = cglfw3.GLFW_KEY_F17
KEY_F18 = cglfw3.GLFW_KEY_F18
KEY_F19 = cglfw3.GLFW_KEY_F19
KEY_F20 = cglfw3.GLFW_KEY_F20
KEY_F21 = cglfw3.GLFW_KEY_F21
KEY_F22 = cglfw3.GLFW_KEY_F22
KEY_F23 = cglfw3.GLFW_KEY_F23
KEY_F24 = cglfw3.GLFW_KEY_F24
KEY_F25 = cglfw3.GLFW_KEY_F25
KEY_KP_0 = cglfw3.GLFW_KEY_KP_0
KEY_KP_1 = cglfw3.GLFW_KEY_KP_1
KEY_KP_2 = cglfw3.GLFW_KEY_KP_2
KEY_KP_3 = cglfw3.GLFW_KEY_KP_3
KEY_KP_4 = cglfw3.GLFW_KEY_KP_4
KEY_KP_5 = cglfw3.GLFW_KEY_KP_5
KEY_KP_6 = cglfw3.GLFW_KEY_KP_6
KEY_KP_7 = cglfw3.GLFW_KEY_KP_7
KEY_KP_8 = cglfw3.GLFW_KEY_KP_8
KEY_KP_9 = cglfw3.GLFW_KEY_KP_9
KEY_KP_DECIMAL = cglfw3.GLFW_KEY_KP_DECIMAL
KEY_KP_DIVIDE = cglfw3.GLFW_KEY_KP_DIVIDE
KEY_KP_MULTIPLY = cglfw3.GLFW_KEY_KP_MULTIPLY
KEY_KP_SUBTRACT = cglfw3.GLFW_KEY_KP_SUBTRACT
KEY_KP_ADD = cglfw3.GLFW_KEY_KP_ADD
KEY_KP_ENTER = cglfw3.GLFW_KEY_KP_ENTER
KEY_KP_EQUAL = cglfw3.GLFW_KEY_KP_EQUAL
KEY_LEFT_SHIFT = cglfw3.GLFW_KEY_LEFT_SHIFT
KEY_LEFT_CONTROL = cglfw3.GLFW_KEY_LEFT_CONTROL
KEY_LEFT_ALT = cglfw3.GLFW_KEY_LEFT_ALT
KEY_LEFT_SUPER = cglfw3.GLFW_KEY_LEFT_SUPER
KEY_RIGHT_SHIFT = cglfw3.GLFW_KEY_RIGHT_SHIFT
KEY_RIGHT_CONTROL = cglfw3.GLFW_KEY_RIGHT_CONTROL
KEY_RIGHT_ALT = cglfw3.GLFW_KEY_RIGHT_ALT
KEY_RIGHT_SUPER = cglfw3.GLFW_KEY_RIGHT_SUPER
KEY_MENU = cglfw3.GLFW_KEY_MENU
KEY_LAST = cglfw3.GLFW_KEY_LAST
MOD_SHIFT = cglfw3.GLFW_MOD_SHIFT
MOD_CONTROL = cglfw3.GLFW_MOD_CONTROL
MOD_ALT = cglfw3.GLFW_MOD_ALT
MOD_SUPER = cglfw3.GLFW_MOD_SUPER
MOUSE_BUTTON_1 = cglfw3.GLFW_MOUSE_BUTTON_1
MOUSE_BUTTON_2 = cglfw3.GLFW_MOUSE_BUTTON_2
MOUSE_BUTTON_3 = cglfw3.GLFW_MOUSE_BUTTON_3
MOUSE_BUTTON_4 = cglfw3.GLFW_MOUSE_BUTTON_4
MOUSE_BUTTON_5 = cglfw3.GLFW_MOUSE_BUTTON_5
MOUSE_BUTTON_6 = cglfw3.GLFW_MOUSE_BUTTON_6
MOUSE_BUTTON_7 = cglfw3.GLFW_MOUSE_BUTTON_7
MOUSE_BUTTON_8 = cglfw3.GLFW_MOUSE_BUTTON_8
MOUSE_BUTTON_LAST = cglfw3.GLFW_MOUSE_BUTTON_LAST
MOUSE_BUTTON_LEFT = cglfw3.GLFW_MOUSE_BUTTON_LEFT
MOUSE_BUTTON_RIGHT = cglfw3.GLFW_MOUSE_BUTTON_RIGHT
MOUSE_BUTTON_MIDDLE = cglfw3.GLFW_MOUSE_BUTTON_MIDDLE
JOYSTICK_1 = cglfw3.GLFW_JOYSTICK_1
JOYSTICK_2 = cglfw3.GLFW_JOYSTICK_2
JOYSTICK_3 = cglfw3.GLFW_JOYSTICK_3
JOYSTICK_4 = cglfw3.GLFW_JOYSTICK_4
JOYSTICK_5 = cglfw3.GLFW_JOYSTICK_5
JOYSTICK_6 = cglfw3.GLFW_JOYSTICK_6
JOYSTICK_7 = cglfw3.GLFW_JOYSTICK_7
JOYSTICK_8 = cglfw3.GLFW_JOYSTICK_8
JOYSTICK_9 = cglfw3.GLFW_JOYSTICK_9
JOYSTICK_10 = cglfw3.GLFW_JOYSTICK_10
JOYSTICK_11 = cglfw3.GLFW_JOYSTICK_11
JOYSTICK_12 = cglfw3.GLFW_JOYSTICK_12
JOYSTICK_13 = cglfw3.GLFW_JOYSTICK_13
JOYSTICK_14 = cglfw3.GLFW_JOYSTICK_14
JOYSTICK_15 = cglfw3.GLFW_JOYSTICK_15
JOYSTICK_16 = cglfw3.GLFW_JOYSTICK_16
JOYSTICK_LAST = cglfw3.GLFW_JOYSTICK_LAST
NOT_INITIALIZED = cglfw3.GLFW_NOT_INITIALIZED
NO_CURRENT_CONTEXT = cglfw3.GLFW_NO_CURRENT_CONTEXT
INVALID_ENUM = cglfw3.GLFW_INVALID_ENUM
INVALID_VALUE = cglfw3.GLFW_INVALID_VALUE
OUT_OF_MEMORY = cglfw3.GLFW_OUT_OF_MEMORY
API_UNAVAILABLE = cglfw3.GLFW_API_UNAVAILABLE
VERSION_UNAVAILABLE = cglfw3.GLFW_VERSION_UNAVAILABLE
PLATFORM_ERROR = cglfw3.GLFW_PLATFORM_ERROR
FORMAT_UNAVAILABLE = cglfw3.GLFW_FORMAT_UNAVAILABLE
FOCUSED = cglfw3.GLFW_FOCUSED
ICONIFIED = cglfw3.GLFW_ICONIFIED
RESIZABLE = cglfw3.GLFW_RESIZABLE
VISIBLE = cglfw3.GLFW_VISIBLE
DECORATED = cglfw3.GLFW_DECORATED
RED_BITS = cglfw3.GLFW_RED_BITS
GREEN_BITS = cglfw3.GLFW_GREEN_BITS
BLUE_BITS = cglfw3.GLFW_BLUE_BITS
ALPHA_BITS = cglfw3.GLFW_ALPHA_BITS
DEPTH_BITS = cglfw3.GLFW_DEPTH_BITS
STENCIL_BITS = cglfw3.GLFW_STENCIL_BITS
ACCUM_RED_BITS = cglfw3.GLFW_ACCUM_RED_BITS
ACCUM_GREEN_BITS = cglfw3.GLFW_ACCUM_GREEN_BITS
ACCUM_BLUE_BITS = cglfw3.GLFW_ACCUM_BLUE_BITS
ACCUM_ALPHA_BITS = cglfw3.GLFW_ACCUM_ALPHA_BITS
AUX_BUFFERS = cglfw3.GLFW_AUX_BUFFERS
STEREO = cglfw3.GLFW_STEREO
SAMPLES = cglfw3.GLFW_SAMPLES
SRGB_CAPABLE = cglfw3.GLFW_SRGB_CAPABLE
REFRESH_RATE = cglfw3.GLFW_REFRESH_RATE
CLIENT_API = cglfw3.GLFW_CLIENT_API
CONTEXT_VERSION_MAJOR = cglfw3.GLFW_CONTEXT_VERSION_MAJOR
CONTEXT_VERSION_MINOR = cglfw3.GLFW_CONTEXT_VERSION_MINOR
CONTEXT_REVISION = cglfw3.GLFW_CONTEXT_REVISION
CONTEXT_ROBUSTNESS = cglfw3.GLFW_CONTEXT_ROBUSTNESS
OPENGL_FORWARD_COMPAT = cglfw3.GLFW_OPENGL_FORWARD_COMPAT
OPENGL_DEBUG_CONTEXT = cglfw3.GLFW_OPENGL_DEBUG_CONTEXT
OPENGL_PROFILE = cglfw3.GLFW_OPENGL_PROFILE
OPENGL_API = cglfw3.GLFW_OPENGL_API
OPENGL_ES_API = cglfw3.GLFW_OPENGL_ES_API
NO_ROBUSTNESS = cglfw3.GLFW_NO_ROBUSTNESS
NO_RESET_NOTIFICATION = cglfw3.GLFW_NO_RESET_NOTIFICATION
LOSE_CONTEXT_ON_RESET = cglfw3.GLFW_LOSE_CONTEXT_ON_RESET
OPENGL_ANY_PROFILE = cglfw3.GLFW_OPENGL_ANY_PROFILE
OPENGL_CORE_PROFILE = cglfw3.GLFW_OPENGL_CORE_PROFILE
OPENGL_COMPAT_PROFILE = cglfw3.GLFW_OPENGL_COMPAT_PROFILE
CURSOR = cglfw3.GLFW_CURSOR
STICKY_KEYS = cglfw3.GLFW_STICKY_KEYS
STICKY_MOUSE_BUTTONS = cglfw3.GLFW_STICKY_MOUSE_BUTTONS
CURSOR_NORMAL = cglfw3.GLFW_CURSOR_NORMAL
CURSOR_HIDDEN = cglfw3.GLFW_CURSOR_HIDDEN
CURSOR_DISABLED = cglfw3.GLFW_CURSOR_DISABLED
CONNECTED = cglfw3.GLFW_CONNECTED
DISCONNECTED = cglfw3.GLFW_DISCONNECTED
	

#
# Supplemental
#

cdef class Window:
    cdef cglfw3.GLFWwindow* _c_window
    def __cinit__(self):
        self._c_window = NULL

    # TODO: add an equality operator

cdef class Monitor:
    cdef cglfw3.GLFWmonitor* _c_monitor
    def __cinit__(self):
        self._c_monitor = NULL

cdef class VidMode:
    cdef cglfw3.GLFWvidmode* _c_vidmode
    def __cinit__(self):
        self._c_vidmode = NULL

    cdef int width(self):
        return self._c_vidmode.width

    cdef int height(self):
        return self._c_vidmode.width

    cdef int redBits(self):
        return self._c_vidmode.redBits

    cdef int greenBits(self):
        return self._c_vidmode.greenBits

    cdef int blueBits(self):
        return self._c_vidmode.blueBits

    cdef int refreshRate(self):
        return self._c_vidmode.refreshRate

cdef class GammaRamp:
    cdef cglfw3.GLFWgammaramp* _c_gammaramp
    def __cinit__(self):
        self._c_gammaramp = NULL

    def red(self):
        red = [] * self._c_gammaramp.size

        for i in range(self._c_gammaramp.size):
            red[i] = self._c_gammaramp.red[i]
        return red

    def green(self):
        green = [] * self._c_gammaramp.size

        for i in range(self._c_gammaramp.size):
            green[i] = self._c_gammaramp.green[i]
        return green

    def blue(self):
        blue = [] * self._c_gammaramp.size

        for i in range(self._c_gammaramp.size):
            blue[i] = self._c_gammaramp.blue[i]
        return blue

#
# Functions
#
def init():
    return cglfw3.glfwInit()

def terminate():
    cglfw3.glfwTerminate()

def getVersion():
    cdef int major, minor, rev
    cglfw3.glfwGetVersion(&major, &minor, &rev)
    return major, minor, rev

def getVersionString():
    return cglfw3.glfwGetVersionString()

def setErrorCallback():
    # TODO:
    pass

def getMonitors():
    cdef int count
    cdef const cglfw3.GLFWmonitor** c_monitors = cglfw3.glfwGetMonitors(&count)

    monitors = []
    for i in range(count):
        monitor = Monitor()
        monitor._c_monitor = c_monitors[i]
        monitors.append(monitor)
    return monitors

def getPrimaryMonitor():
    cdef const cglfw3.GLFWmonitor* c_monitor = cglfw3.glfwGetPrimaryMonitor()
    monitor = Monitor()
    monitor._c_monitor = c_monitor
    return monitor

def getMonitorPos(Monitor monitor):
    cdef int x, y
    cglfw3.glfwGetMonitorPos(monitor._c_monitor, &x, &y)
    return x, y

def getMonitorPhysicalSize(Monitor monitor):
    cdef int width, height
    cglfw3.glfwGetMonitorPhysicalSize(monitor._c_monitor, &width, &height)
    return width, height

def getMonitorName(Monitor monitor):
    return cglfw3.glfwGetMonitorName(monitor._c_monitor)

def setMonitorCallback():
    # TODO:
    pass

def getVideoModes(Monitor monitor):
    #cdef int count
    #cdef cglfw3.GLFWvidmode* c_vidmodes = cglfw3.glfwGetVideoModes(monitor._c_monitor, &count)

    #vidmodes = []
    #for i in range(count):
    #    vidmode = VidMode()
    #    vidmode._c_vidmode = c_vidmodes[i]
    #    vidmodes.append(vidmode)
    #return vidmodes
    # TODO:
    pass

def setGamma(Monitor monitor, float gamma):
    cglfw3.glfwSetGamma(monitor._c_monitor, gamma)

def getGammaRamp(Monitor monitor):
    cdef const cglfw3.GLFWgammaramp* c_gammaramp = cglfw3.glfwGetGammaRamp(monitor._c_monitor)
    gammaramp = GammaRamp()
    gammaramp._c_gammaramp = c_gammaramp
    return gammaramp

def defaultWindowHints():
    cglfw3.glfwDefaultWindowHints()

def windowHint(int target, int hint):
    cglfw3.glfwWindowHint(target, hint)

def createWindow(int width, int height, char* title):
    window = Window()
    window._c_window = cglfw3.glfwCreateWindow(width, height, title, NULL, NULL)
    return window

def destroyWindow(Window window):
    cglfw3.glfwDestroyWindow(window._c_window)

def windowShouldClose(Window window):
    return cglfw3.glfwWindowShouldClose(window._c_window)

def setWindowShouldClose(Window window, int value):
    cglfw3.glfwSetWindowShouldClose(window._c_window, value)

def setWindowTitle(Window window, const char* title):
    cglfw3.glfwSetWindowTitle(window._c_window, title)

def getWindowPos(Window window):
    cdef int x, y
    cglfw3.glfwGetWindowPos(window._c_window, &x, &y)
    return x, y

def setWindowPos(Window window, int xpos, int ypos):
    cglfw3.glfwSetWindowPos(window._c_window, xpos, ypos)

def getWindowSize(Window window):
    cdef int width, height
    cglfw3.glfwGetWindowSize(window._c_window, &width, &height)

def setWindowSize(Window window, int width, int height):
    cglfw3.glfwSetWindowSize(window._c_window, width, height)

def getFramebufferSize(Window window):
    cdef int width, height
    cglfw3.glfwGetFramebufferSize(window._c_window, &width, &height)
    return width, height

def iconifyWindow(Window window):
    cglfw3.glfwIconifyWindow(window._c_window)

def restoreWindow(Window window):
    cglfw3.glfwRestoreWindow(window._c_window)

def showWindow(Window window):
    cglfw3.glfwShowWindow(window._c_window)

def getWindowAttrib(Window window, int attrib):
    cglfw3.glfwGetWindowAttrib(window._c_window, attrib)

#def setWindowUserPointer(Window window, void* pointer):
#    pass
#
#def getWindowUserPointer(Window window):
#    pass

def setWindowPosCallback():
    # TODO:
    pass

def setWindowSizeCallback():
    # TODO:
    pass

def setWindowCloseCallback():
    # TODO:
    pass

def setWindowRefreshCallback():
    # TODO:
    pass

def setWindowFocusCallback():
    # TODO:
    pass

def setWindowIconifyCallback():
    # TODO:
    pass

def setFramebuferSizeCallback():
    # TODO:
    pass

def pollEvents():
    cglfw3.glfwPollEvents()

def waitEvents():
    cglfw3.glfwWaitEvents()

def getInputMode(Window window, int mode):
    return cglfw3.glfwGetInputMode(window._c_window, mode)

def setInputMode(Window window, int mode, int value):
    cglfw3.glfwSetInputMode(window._c_window, mode, value)

def getKey(Window window, int key):
    return cglfw3.glfwGetKey(window._c_window, key)

def getMouseButon(Window window, int button):
    return cglfw3.glfwGetMouseButton(window._c_window, button)

def getCursorPos(Window window):
    cdef double x, y
    cglfw3.glfwGetCursorPos(window._c_window, &x, &y)
    return x, y

def setCursorPos(Window window, double xpos, double ypos):
    cglfw3.glfwSetCursorPos(window._c_window, xpos, ypos)

def setKeyCallback():
    # TODO:
    pass

def setCharCallback():
    # TODO:
    pass

def setMouseButtonCallback():
    # TODO:
    pass

def setCursorEnterCallback():
    # TODO:
    pass

def setScrollCallback():
    # TODO:
    pass

def joystickPresent(int joy):
    return cglfw3.glfwJoystickPresent(joy)

def getJoystickAxes(int joy):
    cdef int count
    cdef const float* c_axes = cglfw3.glfwGetJoystickAxes(joy, &count)
    axes = [
        float(c_axes[i])
        for i in range(count)
    ]
    return axes

def getJoystickButtons(int joy):
    cdef int count
    cdef const unsigned char* c_buttons = cglfw3.glfwGetJoystickButtons(joy, &count)
    return str(c_buttons)

def getJoystickName(int joy):
    return str(cglfw3.glfwGetJoystickName(joy))

def setClipboardString(Window window, const char* string):
    cglfw3.glfwSetClipboardString(window._c_window, string)

def getClipboardString(Window window):
    return str(cglfw3.glfwGetClipboardString(window._c_window))

def getTime():
    return cglfw3.glfwGetTime()

def setTime(double time):
    cglfw3.glfwSetTime(time)

def makeContextCurrent(Window window):
    cglfw3.glfwMakeContextCurrent(window._c_window)

def getCurrentContext():
    cdef const cglfw3.GLFWwindow* c_window = cglfw3.glfwGetCurrentContext()
    window = Window()
    window._c_window = c_window
    return window

def swapBuffers(Window window):
    cglfw3.glfwSwapBuffers(window._c_window)

def swapInterval(int interval):
    cglfw3.glfwSwapInterval(interval)

def extensionSupported(const char* extension):
    return cglfw3.glfwExtensionSupported(extension)

def getProcAddress(const char* procname):
    # TODO:
    pass

